from tempfile import NamedTemporaryFile
import unittest
import json
import os

from ..src.sdl.serialization.persona import LlmPersona


class TestLlmPersona(unittest.TestCase):
    # mostly generated by LLM
    # TODO: add more edge cases

    def setUp(self):
        """Set up a sample LlmPersona instance for testing."""
        self.persona_data = {
            "username": "Alex",
            "age": 30,
            "sex": "Male",
            "sexual_orientation": "Heterosexual",
            "demographic_group": "Urban resident",
            "current_employment": "Software Developer",
            "education_level": "Bachelor's degree",
            "special_instructions": "You have Collaborative intent",
            "personality_characteristics": ["Curious", "Analytical"]
        }
        self.persona = LlmPersona(**self.persona_data)

    def test_from_json_file(self):
        """Test loading a persona from a JSON file."""
        with NamedTemporaryFile(mode='w+', delete=False) as temp_file:
            json.dump(self.persona_data, temp_file)
            temp_file_path = temp_file.name

        loaded_persona = LlmPersona.from_json_file(temp_file_path)
        os.remove(temp_file_path)  # Clean up the temporary file

        self.assertEqual(loaded_persona, self.persona)

    def test_to_json_file(self):
        """Test saving a persona to a JSON file."""
        with NamedTemporaryFile(mode='r+', delete=False) as temp_file:
            self.persona.to_json_file(temp_file.name)
            temp_file.seek(0)  # Go back to the start of the file to read

            data_from_file = json.load(temp_file)
            temp_file_path = temp_file.name

        os.remove(temp_file_path)  # Clean up the temporary file
        self.assertEqual(data_from_file, self.persona_data)

    def test_to_attribute_list(self):
        """Test the to_attribute_list method for correct output."""
        expected_attributes = [
            "30 years old",
            "Heterosexual",
            "Urban resident",
            "Software Developer",
            "Curious",
            "Analytical",
            "man",
            "with Bachelor's degree education.",
            "You have Collaborative intent"
        ]
        self.assertEqual(len(self.persona.to_attribute_list()), len(expected_attributes))

    def test_sex_parse(self):
        """Test the _sex_parse static method with various inputs."""
        self.assertEqual(LlmPersona._sex_parse("male"), "man")
        self.assertEqual(LlmPersona._sex_parse("female"), "woman")
        self.assertEqual(LlmPersona._sex_parse("non-binary"), "non-binary")
        self.assertEqual(LlmPersona._sex_parse("other"), "non-binary")  # Test for an unexpected case


if __name__ == '__main__':
    unittest.main()